# # combine_for_colab.py (Updated Version)
# #
# # This script combines all the necessary project files into a single
# # script that can be easily pasted into a Google Colab notebook.
# # Run this from the root of your project directory, i.e., from inside
# # 'TheShapesOfStories-ebd1d22804185c890753c06965dd7ccfc6f384f0/'.

# import os

# def combine_scripts_with_paths():
#     """
#     Merges specified Python files using their full paths into a single file for Colab.
#     """
#     # The root directory for the source files
#     source_directory = '/Users/johnmikedidonato/Projects/TheShapesOfStories/src'

#     # 1. Define the order of files to be combined.
#     files_to_combine = [
#         'llm.py',
#         'story_data.py',
#         'story_style.py',
#         'poster_layout_templates.py',
#         'story_shape.py',
#         'create_poster.py',
#         'create.py' 
#     ]

#     # The output file will be created in the current directory where the script is run.
#     output_filename = 'colab_script.py'
    
#     # Header instructions for the final Colab file
#     header_instructions = """
# # ==============================================================================
# #           THE SHAPES OF STORIES - GOOGLE COLAB SCRIPT
# # ==============================================================================
# #
# # This script was automatically generated by 'combine_for_colab.py'.
# # To use this in Google Colab:
# #
# # 1. Create a new Colab Notebook.
# # 2. Copy the ENTIRE contents of this file into a single cell in the notebook.
# # 3. Manually move all 'import' statements from throughout the code to the top
# #    of the cell. Remove any duplicate imports.
# # 4. Remove any local imports like 'from story_data import ...' as all
# #    functions are now in the same scope.
# # 5. Run the cell to define all functions. Create new cells to execute
# #    your story generation logic as needed.
# #
# # --- Step 1 in Colab: Install Dependencies ---
# # !apt-get install -y libcairo2-dev libpango1.0-dev libgirepository1.0-dev
# # !pip install PyGObject Pycairo
# # !pip install gspread google-auth-oauthlib pandas PyYAML langchain langchain-openai langchain-anthropic langchain-google-genai langchain-groq tiktoken numpy scipy shapely matplotlib Pillow
# #
# # ------------------------------------------------------------------------------
# """

#     try:
#         with open(output_filename, 'w', encoding='utf-8') as outfile:
#             outfile.write(header_instructions)
            
#             for filename in files_to_combine:
#                 # Construct the full path to the source file
#                 full_path = os.path.join(source_directory, filename)

#                 # Check if the file exists at the specified path
#                 if not os.path.exists(full_path):
#                     print(f"Warning: File '{full_path}' not found. Skipping.")
#                     continue

#                 print(f"Processing {full_path}...")
                
#                 # Write a separator header for clarity
#                 outfile.write("\n\n# ==============================================================================\n")
#                 outfile.write(f"#  CONTENTS FROM: {filename}\n")
#                 outfile.write("# ==============================================================================\n\n")

#                 # Read the content of the current file and write it to the output
#                 with open(full_path, 'r', encoding='utf-8') as infile:
#                     content = infile.read()
#                     outfile.write(content)

#         print(f"\n✅ Successfully combined scripts into '{output_filename}'.")
#         print("\nNext Steps:")
#         print("1. Open the generated 'colab_script.py' file.")
#         print("2. Copy its contents and paste them into a single cell in your Google Colab notebook.")
#         print("3. Follow the setup instructions at the top of the generated file.")

#     except IOError as e:
#         print(f"An error occurred: {e}")

# if __name__ == '__main__':
#     combine_scripts_with_paths()

# combine_for_colab.py (Final Automated Version)
#
# This script combines all project files into a single file for Colab
# and AUTOMATICALLY removes local import statements.

import os

def combine_scripts_with_paths():
    """
    Merges specified Python files, dynamically removing local imports.
    """
    # The directory where your source .py files are located.
    # Note: I've reverted this to your original local path for your convenience.
    source_directory = '/Users/johnmikedidonato/Projects/TheShapesOfStories/src'

    # The output file will be created in the directory where this script is run.
    output_filename = 'colab_script.py'

    # 1. Define the files to combine and the names of the local modules.
    files_to_combine = [
        'llm.py', 'story_data.py', 'story_style.py', 
        'poster_layout_templates.py', 'story_shape.py', 
        'create_poster.py', 'create.py'
    ]
    
    # This set contains the names of your local Python files (without .py)
    # The script will remove any line that looks like "from module import ..."
    local_module_names = {
        'llm', 'story_data', 'story_style', 'poster_layout_templates', 
        'story_shape', 'create_poster', 'create'
    }

    # Header instructions for the final Colab file
    header_instructions = """
# ==============================================================================
#           THE SHAPES OF STORIES - GOOGLE COLAB SCRIPT
# ==============================================================================
#
# This script was automatically generated by 'combine_for_colab.py'.
# It contains all project code in a single file and has had local
# import statements (e.g., 'from llm import...') automatically removed.
#
# ------------------------------------------------------------------------------
"""

    try:
        with open(output_filename, 'w', encoding='utf-8') as outfile:
            outfile.write(header_instructions)
            
            for filename in files_to_combine:
                full_path = os.path.join(source_directory, filename)

                if not os.path.exists(full_path):
                    print(f"Warning: File '{full_path}' not found. Skipping.")
                    continue

                print(f"Processing {filename}...")
                
                outfile.write("\n\n# ==============================================================================\n")
                outfile.write(f"#  CONTENTS FROM: {filename}\n")
                outfile.write("# ==============================================================================\n\n")

                with open(full_path, 'r', encoding='utf-8') as infile:
                    # --- NEW LOGIC: Read line-by-line and filter ---
                    for line in infile:
                        # Check if the line is a local import
                        stripped_line = line.strip()
                        is_local_import = False
                        if stripped_line.startswith('from '):
                            # Get the module name, which is the second word
                            parts = stripped_line.split()
                            if len(parts) > 1 and parts[1] in local_module_names:
                                is_local_import = True
                        
                        # If it's a local import, skip it. Otherwise, write it.
                        if is_local_import:
                            print(f"  - Removing local import: '{stripped_line}'")
                        else:
                            outfile.write(line)
            
        print(f"\n✅ Successfully combined scripts and removed local imports into '{output_filename}'.")
        print("\nYour 'colab_script.py' file is now ready for Colab with no manual editing needed!")

    except IOError as e:
        print(f"An error occurred: {e}")

if __name__ == '__main__':
    combine_scripts_with_paths()